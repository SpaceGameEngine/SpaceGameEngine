# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:

- job: windows
  pool:
    vmImage: 'windows-latest'

  steps:
  - task: MSBuild@1
    displayName: 'build'
    inputs:
      solution: 'SpaceGameEngine.sln'
      maximumCpuCount: true
      msbuildArchitecture: 'x64'

  - script: |
      Binary\TestCatch2\x64\Debug\TestCatch2.exe -r junit -o TestCatch2.xml
      Binary\TestCommon\x64\Debug\TestCommon.exe -r junit -o TestCommon.xml
    displayName: 'test'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/TEST-*.xml'
      failTaskOnFailedTests: true

  

- job: ubuntu
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - script: |
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      sudo apt-get update
      sudo apt-get install gcc-9
      gcc-9 -v
      g++-9 -v
    displayName: 'upgrade gcc'

  - script: |
      mkdir build
      cd build
      CC=gcc-9 CXX=g++-9 cmake ..
      make -j4
    displayName: 'build'

  - script: |
      Test/TestCatch2/TestCatch2 -r junit -o TestCatch2.xml
      Test/TestCommon/TestCommon -r junit -o TestCommon.xml
    displayName: 'test'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/TEST-*.xml'
      failTaskOnFailedTests: true

- job: macos
  pool:
    vmImage: 'macos-latest'

  steps:
  - script: |
      mkdir build
      cd build
      cmake ..
      make -j4
    displayName: 'build'

  - script: |
      Test/TestCatch2/TestCatch2 -r junit -o TestCatch2.xml
      Test/TestCommon/TestCommon -r junit -o TestCommon.xml
    displayName: 'test'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/TEST-*.xml'
      failTaskOnFailedTests: true